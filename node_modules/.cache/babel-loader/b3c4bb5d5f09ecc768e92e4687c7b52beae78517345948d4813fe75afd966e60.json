{"ast":null,"code":"var _jsxFileName = \"/Users/daphnewu/Desktop/Projects/portfolio/src/components/Hero.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './styles/Hero.css';\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hero = ({\n  setShowNavbar\n}) => {\n  _s();\n  const fullText = \"hey there! i’m daphne.\";\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [startTyping, setStartTyping] = useState(false);\n  const [hoveredText, setHoveredText] = useState(false);\n  const handleMouseMove = e => {\n    const heroSection = e.currentTarget;\n    const heroRect = heroSection.getBoundingClientRect();\n    const xPos = e.clientX - heroRect.left;\n    const yPos = e.clientY - heroRect.top;\n\n    // Calculate distance from mouse to the center of the text area\n    const distance = Math.sqrt(Math.pow(xPos - heroRect.width / 2, 2) + Math.pow(yPos - heroRect.height / 2, 2));\n\n    // Change color if cursor is within a certain distance from the center\n    if (distance < 150) {\n      setHoveredText(true); // Text color will change if within 150px radius\n    } else {\n      setHoveredText(false); // Reset color if outside the radius\n    }\n  };\n  useEffect(() => {\n    // Simulate loading process\n    const timer = setTimeout(() => {\n      setLoading(false); // End loading\n      setStartTyping(true); // Start typing animation\n      setShowNavbar(true); // Show Navbar as soon as typing begins\n    }, 1500); // Slightly earlier than full loading time\n\n    return () => clearTimeout(timer);\n  }, [setShowNavbar]);\n  useEffect(() => {\n    if (startTyping) {\n      const interval = setInterval(() => {\n        if (displayedText.length < fullText.length) {\n          setDisplayedText(prev => prev + fullText[displayedText.length]);\n        } else {\n          clearInterval(interval);\n        }\n      }, 50); // Typing speed\n\n      return () => clearInterval(interval);\n    }\n  }, [startTyping, displayedText]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero-section bg-[#141414] text-white\",\n    onMouseMove: handleMouseMove,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-container mx-auto max-w-4xl px-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: `text-4xl sm:text-6xl font-bold font-sono text-center sm:text-left ${hoveredText ? 'hovered' : ''}`,\n        children: [displayedText, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"typing-cursor\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg sm:text-xl font-mono text-center sm:text-left mt-4\",\n        children: \"I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center sm:text-left\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-[#3c3c3c] hover:border-transparent hover:text-white transition-colors duration-300\",\n          children: \"\\u2192 say hi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Hero, \"v5gOR/w99vODd9BVvD6AXUAEp4Q=\");\n_c = Hero;\nexport default Hero;\n\n// import React, { useState, useEffect } from \"react\";\n// import './styles/Hero.css'; // Import the CSS for the cursor and animation\n// import Loading from './Loading';\n\n// const Hero = () => {\n//   const fullText = [\"hey there!\", \"i’m daphne.\"];\n//   const [firstLineText, setFirstLineText] = useState(\"\"); // Track the text for the first line\n//   const [secondLineText, setSecondLineText] = useState(\"\"); // Track the text for the second line\n//   const [typingIndex, setTypingIndex] = useState(0); // Track which line is being typed\n//   const [cursorVisible, setCursorVisible] = useState(true); // Toggle cursor visibility\n//   const [loading, setLoading] = useState(true); // Loading state\n//   const [startTyping, setStartTyping] = useState(false); // State to trigger typewriter effect\n\n//   // Simulate a 2-second loading process\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setLoading(false); // End loading\n//       setStartTyping(true); // Start typing animation after loading\n//     }, 2000); // 2-second delay\n\n//     return () => clearTimeout(timer); // Clean up timer\n//   }, []);\n\n//   // Typing effect for the first line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 0) {\n//       const interval = setInterval(() => {\n//         if (firstLineText.length < fullText[0].length) {\n//           setFirstLineText((prevText) => prevText + fullText[0][firstLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//           setTypingIndex(1); // Start typing the second line after the first finishes\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [firstLineText, typingIndex, startTyping]);\n\n//   // Typing effect for the second line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 1) {\n//       const interval = setInterval(() => {\n//         if (secondLineText.length < fullText[1].length) {\n//           setSecondLineText((prevText) => prevText + fullText[1][secondLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [secondLineText, typingIndex, startTyping]);\n\n//   // Show loading screen while loading is true\n//   if (loading) {\n//     return <Loading />;\n//   }\n\n//   return (\n//     <div className=\"hero-section bg-black\" style={{ color: \"#FFFFF0\" }}>\n//       {/* Stacked Text with Typing Effect */}\n//       <div className=\"absolute left-64 top-1/4 transform -translate-y-1/2 space-y-4 text-left\">\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {firstLineText} {/* First line */}\n//           {typingIndex === 0 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on first line typing */}\n//         </h1>\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {secondLineText} {/* Second line */}\n//           {typingIndex === 1 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on second line typing */}\n//         </h1>\n//       </div>\n\n//       {/* Intro Text */}\n//       <div className=\"absolute left-64 text-left max-w-lg mt-12\">\n//         <p className=\"text-lg sm:text-xl text-white font-mono font-bold\">\n//           I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n//         </p>\n//         {/* Button */}\n//         <button className=\"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-balck hover:text-white transition\">\n//           → say hi\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Adjust the path based on where the image is located\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faChevronDown } from '@fortawesome/free-solid-svg-icons'; // Downward arrow icon\n\n// const Hero = () => {\n//   const imageWidth = 700;\n//   const [position, setPosition] = useState(-imageWidth); // Start off-screen to the left\n\n//   useEffect(() => {\n//     let animationFrameId;\n\n//     // Function to animate the image across the screen\n//     const animate = () => {\n//       setPosition((prev) =>\n//         prev >= window.innerWidth ? -imageWidth : prev + 2 // Reset to the left after leaving the screen\n//       );\n//       animationFrameId = requestAnimationFrame(animate);\n//     };\n\n//     // Start animation\n//     animate();\n\n//     // Cleanup on component unmount\n//     return () => cancelAnimationFrame(animationFrameId);\n//   }, []);\n\n//   // Bobbing effect based on position\n//   const bobPosition = Math.sin(position * 0.05) * 20; // Vertical bobbing\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] overflow-hidden relative\">\n//       {/* Title */}\n//       <h1 className=\"text-6xl font-bold text-[#090704] mt-12 mb-16 tracking-wide\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Image moving across the screen */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sail Logo\"\n//         style={{\n//           transform: translateX(${position}px) translateY(${bobPosition}px), // Move horizontally and vertically\n//           position: \"absolute\", // Ensure it's positioned absolutely within the screen\n//         }}\n//         className=\"w-[700px] h-auto\"\n//       />\n\n//       {/* Down arrow */}\n//       <div className=\"down-arrow mt-64 style={{ position: 'absolute', bottom: '5px' }\">\n//         <FontAwesomeIcon icon={faChevronDown} size=\"3x\" color=\"#090704\" />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n//moving animation hero\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Your sailboat image\n// import ArrowImage from \"./assets/images/arrow.png\"; // Arrow image for desktop\n// import DragImage from \"./assets/images/drag.png\"; // Drag icon for mobile\n\n// const Hero = () => {\n//   const [position, setPosition] = useState({ x: 0, y: 300 });\n//   const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });\n//   const [isMobile, setIsMobile] = useState(false); // Track if the device is mobile\n//   const [isMoving, setIsMoving] = useState(false); // Track if the image is moving\n\n//   // Check if the device is mobile\n//   useEffect(() => {\n//     const checkMobile = () => {\n//       setIsMobile(window.innerWidth <= 768); // You can adjust the breakpoint based on your needs\n//     };\n\n//     // Check on load\n//     checkMobile();\n\n//     // Add resize listener to detect device switch\n//     window.addEventListener(\"resize\", checkMobile);\n\n//     return () => window.removeEventListener(\"resize\", checkMobile); // Cleanup on unmount\n//   }, []);\n\n//   // Handle keydown events for arrow keys (Desktop)\n//   const handleKeyDown = (event) => {\n//     const step = 10; // Distance moved per key press\n//     let newPosition = { ...position };\n\n//     switch (event.key) {\n//       case \"ArrowUp\":\n//         newPosition.y -= step;\n//         break;\n//       case \"ArrowDown\":\n//         newPosition.y += step;\n//         break;\n//       case \"ArrowLeft\":\n//         newPosition.x -= step;\n//         break;\n//       case \"ArrowRight\":\n//         newPosition.x += step;\n//         break;\n//       default:\n//         break;\n//     }\n\n//     setPosition(newPosition);\n//     setIsMoving(true); // Mark as moving when key is pressed\n//   };\n\n//   // Handle touch events for mobile (swiping)\n//   const handleTouchStart = (e) => {\n//     const touchStartX = e.touches[0].clientX;\n//     const touchStartY = e.touches[0].clientY;\n//     setTouchStart({ x: touchStartX, y: touchStartY });\n//   };\n\n//   const handleTouchMove = (e) => {\n//     if (!touchStart.x || !touchStart.y) return; // Ignore if no touch start position\n\n//     const touchEndX = e.touches[0].clientX;\n//     const touchEndY = e.touches[0].clientY;\n\n//     const deltaX = touchEndX - touchStart.x;\n//     const deltaY = touchEndY - touchStart.y;\n\n//     let newPosition = { ...position };\n\n//     // Move the boat based on the touch swipe distance\n//     newPosition.x += deltaX / 10; // Divide by a factor to control the speed of movement\n//     newPosition.y += deltaY / 10;\n\n//     setPosition(newPosition);\n//     setTouchStart({ x: touchEndX, y: touchEndY }); // Update touch start for next movement\n//     setIsMoving(true); // Mark as moving when touch is moved\n//   };\n\n//   const handleTouchEnd = () => {\n//     setTouchStart({ x: 0, y: 0 }); // Reset touch position when touch ends\n//   };\n\n//   // Attach and clean up keydown event listener\n//   useEffect(() => {\n//     window.addEventListener(\"keydown\", handleKeyDown);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [position]); // Only re-run when position changes\n\n//   // Attach and clean up touch event listeners for mobile\n//   useEffect(() => {\n//     window.addEventListener(\"touchstart\", handleTouchStart);\n//     window.addEventListener(\"touchmove\", handleTouchMove);\n//     window.addEventListener(\"touchend\", handleTouchEnd);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"touchstart\", handleTouchStart);\n//       window.removeEventListener(\"touchmove\", handleTouchMove);\n//       window.removeEventListener(\"touchend\", handleTouchEnd);\n//     };\n//   }, [position, touchStart]);\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] relative\">\n//       {/* Title */}\n//       <h1 className=\"text-7xl font-bold text-[#090704] mt-12 mb-16 tracking-wide z-20\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Instruction Message for Mobile */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\", // Position it near the center of the screen\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on mobile and if not moving\n//         }}\n//       >\n//         Drag the sailboat to move it\n//       </p>\n\n//       {/* Instruction Message for Desktop */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, 40%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (!isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on desktop and if not moving\n//         }}\n//       >\n//         Use the arrow keys to move the sailboat\n//       </p>\n\n//       {/* Sailboat Image */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sailboat\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x}px,\n//           top: ${position.y}px,\n//           width: \"200px\",\n//           height: \"auto\",\n//           zIndex: 10,\n//         }}\n//       />\n\n//       {/* Arrow or Drag Image */}\n//       <img\n//         src={isMobile ? DragImage : ArrowImage} // Show drag icon for mobile, arrow for desktop\n//         alt=\"Move icon\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x + 220}px, // Position next to the sailboat\n//           top: ${position.y + 50}px, // Position vertically aligned with the sailboat\n//           width: \"50px\", // Size of the move icon\n//           height: \"auto\",\n//           zIndex: 20,\n//           visibility: isMoving ? \"hidden\" : \"visible\", // Hide when the image starts moving\n//         }}\n//       />\n\n//       {/* Optional: Down Arrow */}\n//       <div\n//         className=\"down-arrow\"\n//         style={{\n//           position: \"absolute\",\n//           bottom: \"10px\",\n//           left: \"50%\",\n//           transform: \"translateX(-50%)\",\n//           color: \"#090704\", // Customize the arrow color\n//           fontSize: \"2rem\", // Adjust the size of the arrow\n//         }}\n//       >\n//         ↓\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero; \nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["React","useState","useEffect","Loading","jsxDEV","_jsxDEV","Hero","setShowNavbar","_s","fullText","displayedText","setDisplayedText","loading","setLoading","startTyping","setStartTyping","hoveredText","setHoveredText","handleMouseMove","e","heroSection","currentTarget","heroRect","getBoundingClientRect","xPos","clientX","left","yPos","clientY","top","distance","Math","sqrt","pow","width","height","timer","setTimeout","clearTimeout","interval","setInterval","length","prev","clearInterval","fileName","_jsxFileName","lineNumber","columnNumber","className","onMouseMove","children","_c","$RefreshReg$"],"sources":["/Users/daphnewu/Desktop/Projects/portfolio/src/components/Hero.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './styles/Hero.css';\nimport Loading from './Loading';\n\nconst Hero = ({ setShowNavbar }) => {\n  const fullText = \"hey there! i’m daphne.\";\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [startTyping, setStartTyping] = useState(false);\n  const [hoveredText, setHoveredText] = useState(false);\n\n  const handleMouseMove = (e) => {\n    const heroSection = e.currentTarget;\n    const heroRect = heroSection.getBoundingClientRect();\n    const xPos = e.clientX - heroRect.left;\n    const yPos = e.clientY - heroRect.top;\n    \n    // Calculate distance from mouse to the center of the text area\n    const distance = Math.sqrt(\n      Math.pow(xPos - heroRect.width / 2, 2) + Math.pow(yPos - heroRect.height / 2, 2)\n    );\n\n    // Change color if cursor is within a certain distance from the center\n    if (distance < 150) {\n      setHoveredText(true);  // Text color will change if within 150px radius\n    } else {\n      setHoveredText(false); // Reset color if outside the radius\n    }\n  };\n\n  useEffect(() => {\n    // Simulate loading process\n    const timer = setTimeout(() => {\n      setLoading(false); // End loading\n      setStartTyping(true); // Start typing animation\n      setShowNavbar(true); // Show Navbar as soon as typing begins\n    }, 1500); // Slightly earlier than full loading time\n\n    return () => clearTimeout(timer);\n  }, [setShowNavbar]);\n\n  useEffect(() => {\n    if (startTyping) {\n      const interval = setInterval(() => {\n        if (displayedText.length < fullText.length) {\n          setDisplayedText((prev) => prev + fullText[displayedText.length]);\n        } else {\n          clearInterval(interval);\n        }\n      }, 50); // Typing speed\n\n      return () => clearInterval(interval);\n    }\n  }, [startTyping, displayedText]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"hero-section bg-[#141414] text-white\" onMouseMove={handleMouseMove}>\n      <div className=\"hero-container mx-auto max-w-4xl px-6\">\n        <h1 className={`text-4xl sm:text-6xl font-bold font-sono text-center sm:text-left ${hoveredText ? 'hovered' : ''}`}>\n          {displayedText}\n          <span className=\"typing-cursor\"> </span>\n        </h1>\n        <p className=\"text-lg sm:text-xl font-mono text-center sm:text-left mt-4\">\n          I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n        </p>\n        <div className=\"text-center sm:text-left\">\n          <button className=\"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-[#3c3c3c] hover:border-transparent hover:text-white transition-colors duration-300\">\n            → say hi\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import './styles/Hero.css'; // Import the CSS for the cursor and animation\n// import Loading from './Loading';\n\n// const Hero = () => {\n//   const fullText = [\"hey there!\", \"i’m daphne.\"];\n//   const [firstLineText, setFirstLineText] = useState(\"\"); // Track the text for the first line\n//   const [secondLineText, setSecondLineText] = useState(\"\"); // Track the text for the second line\n//   const [typingIndex, setTypingIndex] = useState(0); // Track which line is being typed\n//   const [cursorVisible, setCursorVisible] = useState(true); // Toggle cursor visibility\n//   const [loading, setLoading] = useState(true); // Loading state\n//   const [startTyping, setStartTyping] = useState(false); // State to trigger typewriter effect\n\n//   // Simulate a 2-second loading process\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setLoading(false); // End loading\n//       setStartTyping(true); // Start typing animation after loading\n//     }, 2000); // 2-second delay\n\n//     return () => clearTimeout(timer); // Clean up timer\n//   }, []);\n\n//   // Typing effect for the first line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 0) {\n//       const interval = setInterval(() => {\n//         if (firstLineText.length < fullText[0].length) {\n//           setFirstLineText((prevText) => prevText + fullText[0][firstLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//           setTypingIndex(1); // Start typing the second line after the first finishes\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [firstLineText, typingIndex, startTyping]);\n\n//   // Typing effect for the second line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 1) {\n//       const interval = setInterval(() => {\n//         if (secondLineText.length < fullText[1].length) {\n//           setSecondLineText((prevText) => prevText + fullText[1][secondLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [secondLineText, typingIndex, startTyping]);\n\n//   // Show loading screen while loading is true\n//   if (loading) {\n//     return <Loading />;\n//   }\n\n//   return (\n//     <div className=\"hero-section bg-black\" style={{ color: \"#FFFFF0\" }}>\n//       {/* Stacked Text with Typing Effect */}\n//       <div className=\"absolute left-64 top-1/4 transform -translate-y-1/2 space-y-4 text-left\">\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {firstLineText} {/* First line */}\n//           {typingIndex === 0 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on first line typing */}\n//         </h1>\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {secondLineText} {/* Second line */}\n//           {typingIndex === 1 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on second line typing */}\n//         </h1>\n//       </div>\n\n//       {/* Intro Text */}\n//       <div className=\"absolute left-64 text-left max-w-lg mt-12\">\n//         <p className=\"text-lg sm:text-xl text-white font-mono font-bold\">\n//           I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n//         </p>\n//         {/* Button */}\n//         <button className=\"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-balck hover:text-white transition\">\n//           → say hi\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Adjust the path based on where the image is located\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faChevronDown } from '@fortawesome/free-solid-svg-icons'; // Downward arrow icon\n\n// const Hero = () => {\n//   const imageWidth = 700;\n//   const [position, setPosition] = useState(-imageWidth); // Start off-screen to the left\n\n//   useEffect(() => {\n//     let animationFrameId;\n\n//     // Function to animate the image across the screen\n//     const animate = () => {\n//       setPosition((prev) =>\n//         prev >= window.innerWidth ? -imageWidth : prev + 2 // Reset to the left after leaving the screen\n//       );\n//       animationFrameId = requestAnimationFrame(animate);\n//     };\n\n//     // Start animation\n//     animate();\n\n//     // Cleanup on component unmount\n//     return () => cancelAnimationFrame(animationFrameId);\n//   }, []);\n\n//   // Bobbing effect based on position\n//   const bobPosition = Math.sin(position * 0.05) * 20; // Vertical bobbing\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] overflow-hidden relative\">\n//       {/* Title */}\n//       <h1 className=\"text-6xl font-bold text-[#090704] mt-12 mb-16 tracking-wide\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Image moving across the screen */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sail Logo\"\n//         style={{\n//           transform: translateX(${position}px) translateY(${bobPosition}px), // Move horizontally and vertically\n//           position: \"absolute\", // Ensure it's positioned absolutely within the screen\n//         }}\n//         className=\"w-[700px] h-auto\"\n//       />\n\n//       {/* Down arrow */}\n//       <div className=\"down-arrow mt-64 style={{ position: 'absolute', bottom: '5px' }\">\n//         <FontAwesomeIcon icon={faChevronDown} size=\"3x\" color=\"#090704\" />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n\n//moving animation hero\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Your sailboat image\n// import ArrowImage from \"./assets/images/arrow.png\"; // Arrow image for desktop\n// import DragImage from \"./assets/images/drag.png\"; // Drag icon for mobile\n\n// const Hero = () => {\n//   const [position, setPosition] = useState({ x: 0, y: 300 });\n//   const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });\n//   const [isMobile, setIsMobile] = useState(false); // Track if the device is mobile\n//   const [isMoving, setIsMoving] = useState(false); // Track if the image is moving\n\n//   // Check if the device is mobile\n//   useEffect(() => {\n//     const checkMobile = () => {\n//       setIsMobile(window.innerWidth <= 768); // You can adjust the breakpoint based on your needs\n//     };\n\n//     // Check on load\n//     checkMobile();\n\n//     // Add resize listener to detect device switch\n//     window.addEventListener(\"resize\", checkMobile);\n\n//     return () => window.removeEventListener(\"resize\", checkMobile); // Cleanup on unmount\n//   }, []);\n\n//   // Handle keydown events for arrow keys (Desktop)\n//   const handleKeyDown = (event) => {\n//     const step = 10; // Distance moved per key press\n//     let newPosition = { ...position };\n\n//     switch (event.key) {\n//       case \"ArrowUp\":\n//         newPosition.y -= step;\n//         break;\n//       case \"ArrowDown\":\n//         newPosition.y += step;\n//         break;\n//       case \"ArrowLeft\":\n//         newPosition.x -= step;\n//         break;\n//       case \"ArrowRight\":\n//         newPosition.x += step;\n//         break;\n//       default:\n//         break;\n//     }\n\n//     setPosition(newPosition);\n//     setIsMoving(true); // Mark as moving when key is pressed\n//   };\n\n//   // Handle touch events for mobile (swiping)\n//   const handleTouchStart = (e) => {\n//     const touchStartX = e.touches[0].clientX;\n//     const touchStartY = e.touches[0].clientY;\n//     setTouchStart({ x: touchStartX, y: touchStartY });\n//   };\n\n//   const handleTouchMove = (e) => {\n//     if (!touchStart.x || !touchStart.y) return; // Ignore if no touch start position\n\n//     const touchEndX = e.touches[0].clientX;\n//     const touchEndY = e.touches[0].clientY;\n\n//     const deltaX = touchEndX - touchStart.x;\n//     const deltaY = touchEndY - touchStart.y;\n\n//     let newPosition = { ...position };\n\n//     // Move the boat based on the touch swipe distance\n//     newPosition.x += deltaX / 10; // Divide by a factor to control the speed of movement\n//     newPosition.y += deltaY / 10;\n\n//     setPosition(newPosition);\n//     setTouchStart({ x: touchEndX, y: touchEndY }); // Update touch start for next movement\n//     setIsMoving(true); // Mark as moving when touch is moved\n//   };\n\n//   const handleTouchEnd = () => {\n//     setTouchStart({ x: 0, y: 0 }); // Reset touch position when touch ends\n//   };\n\n//   // Attach and clean up keydown event listener\n//   useEffect(() => {\n//     window.addEventListener(\"keydown\", handleKeyDown);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [position]); // Only re-run when position changes\n\n//   // Attach and clean up touch event listeners for mobile\n//   useEffect(() => {\n//     window.addEventListener(\"touchstart\", handleTouchStart);\n//     window.addEventListener(\"touchmove\", handleTouchMove);\n//     window.addEventListener(\"touchend\", handleTouchEnd);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"touchstart\", handleTouchStart);\n//       window.removeEventListener(\"touchmove\", handleTouchMove);\n//       window.removeEventListener(\"touchend\", handleTouchEnd);\n//     };\n//   }, [position, touchStart]);\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] relative\">\n//       {/* Title */}\n//       <h1 className=\"text-7xl font-bold text-[#090704] mt-12 mb-16 tracking-wide z-20\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Instruction Message for Mobile */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\", // Position it near the center of the screen\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on mobile and if not moving\n//         }}\n//       >\n//         Drag the sailboat to move it\n//       </p>\n\n//       {/* Instruction Message for Desktop */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, 40%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (!isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on desktop and if not moving\n//         }}\n//       >\n//         Use the arrow keys to move the sailboat\n//       </p>\n\n//       {/* Sailboat Image */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sailboat\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x}px,\n//           top: ${position.y}px,\n//           width: \"200px\",\n//           height: \"auto\",\n//           zIndex: 10,\n//         }}\n//       />\n\n//       {/* Arrow or Drag Image */}\n//       <img\n//         src={isMobile ? DragImage : ArrowImage} // Show drag icon for mobile, arrow for desktop\n//         alt=\"Move icon\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x + 220}px, // Position next to the sailboat\n//           top: ${position.y + 50}px, // Position vertically aligned with the sailboat\n//           width: \"50px\", // Size of the move icon\n//           height: \"auto\",\n//           zIndex: 20,\n//           visibility: isMoving ? \"hidden\" : \"visible\", // Hide when the image starts moving\n//         }}\n//       />\n\n//       {/* Optional: Down Arrow */}\n//       <div\n//         className=\"down-arrow\"\n//         style={{\n//           position: \"absolute\",\n//           bottom: \"10px\",\n//           left: \"50%\",\n//           transform: \"translateX(-50%)\",\n//           color: \"#090704\", // Customize the arrow color\n//           fontSize: \"2rem\", // Adjust the size of the arrow\n//         }}\n//       >\n//         ↓\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero; \n"],"mappings":"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A;QAAK2C,SAAS,EAAC,0BAA0B;QAAAE,QAAA,eACvC7C,OAAA;UAAQ2C,SAAS,EAAC,yJAAyJ;UAAAE,QAAA,EAAC;QAE5K;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvC,EAAA,CAzEIF,IAAI;AAAA6C,EAAA,GAAJ7C,IAAI;AA2EV,eAAeA,IAAI;;AAKnB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}