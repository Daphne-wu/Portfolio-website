{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import'./styles/Hero.css';import Loading from'./Loading';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Hero=_ref=>{let{setShowNavbar}=_ref;const fullText=\"hey there! i’m daphne.\";const[displayedText,setDisplayedText]=useState(\"\");const[loading,setLoading]=useState(true);const[startTyping,setStartTyping]=useState(false);useEffect(()=>{// Simulate loading process\nconst timer=setTimeout(()=>{setLoading(false);// End loading\nsetStartTyping(true);// Start typing animation\nsetShowNavbar(true);// Show Navbar as soon as typing begins\n},1500);// Slightly earlier than full loading time\nreturn()=>clearTimeout(timer);},[setShowNavbar]);useEffect(()=>{if(startTyping){const interval=setInterval(()=>{if(displayedText.length<fullText.length){setDisplayedText(prev=>prev+fullText[displayedText.length]);}else{clearInterval(interval);}},50);// Typing speed\nreturn()=>clearInterval(interval);}},[startTyping,displayedText]);if(loading){return/*#__PURE__*/_jsx(Loading,{});}return/*#__PURE__*/_jsx(\"div\",{className:\"hero-section bg-[#141414] text-white\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"hero-container mx-auto max-w-4xl px-6\",children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"text-4xl sm:text-6xl font-bold font-sono text-center sm:text-left\",children:[displayedText,/*#__PURE__*/_jsx(\"span\",{className:\"typing-cursor\",children:\" \"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg sm:text-xl font-mono text-center sm:text-left mt-4\",children:\"I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center sm:text-left\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.href=\"/contact\"// Link to the contact page\n,className:\"mt-12 px-8 py-4 border border-white text-white text-lg rounded-full hover:bg-[#3c3c3c] hover:border-transparent hover:text-white transition-colors duration-300\",children:\"\\u2192 say hi\"})})]})});};export default Hero;// import React, { useState, useEffect } from \"react\";\n// import './styles/Hero.css'; // Import the CSS for the cursor and animation\n// import Loading from './Loading';\n// const Hero = () => {\n//   const fullText = [\"hey there!\", \"i’m daphne.\"];\n//   const [firstLineText, setFirstLineText] = useState(\"\"); // Track the text for the first line\n//   const [secondLineText, setSecondLineText] = useState(\"\"); // Track the text for the second line\n//   const [typingIndex, setTypingIndex] = useState(0); // Track which line is being typed\n//   const [cursorVisible, setCursorVisible] = useState(true); // Toggle cursor visibility\n//   const [loading, setLoading] = useState(true); // Loading state\n//   const [startTyping, setStartTyping] = useState(false); // State to trigger typewriter effect\n//   // Simulate a 2-second loading process\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setLoading(false); // End loading\n//       setStartTyping(true); // Start typing animation after loading\n//     }, 2000); // 2-second delay\n//     return () => clearTimeout(timer); // Clean up timer\n//   }, []);\n//   // Typing effect for the first line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 0) {\n//       const interval = setInterval(() => {\n//         if (firstLineText.length < fullText[0].length) {\n//           setFirstLineText((prevText) => prevText + fullText[0][firstLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//           setTypingIndex(1); // Start typing the second line after the first finishes\n//         }\n//       }, 50); // typing speed\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [firstLineText, typingIndex, startTyping]);\n//   // Typing effect for the second line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 1) {\n//       const interval = setInterval(() => {\n//         if (secondLineText.length < fullText[1].length) {\n//           setSecondLineText((prevText) => prevText + fullText[1][secondLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//         }\n//       }, 50); // typing speed\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [secondLineText, typingIndex, startTyping]);\n//   // Show loading screen while loading is true\n//   if (loading) {\n//     return <Loading />;\n//   }\n//   return (\n//     <div className=\"hero-section bg-black\" style={{ color: \"#FFFFF0\" }}>\n//       {/* Stacked Text with Typing Effect */}\n//       <div className=\"absolute left-64 top-1/4 transform -translate-y-1/2 space-y-4 text-left\">\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {firstLineText} {/* First line */}\n//           {typingIndex === 0 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on first line typing */}\n//         </h1>\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {secondLineText} {/* Second line */}\n//           {typingIndex === 1 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on second line typing */}\n//         </h1>\n//       </div>\n//       {/* Intro Text */}\n//       <div className=\"absolute left-64 text-left max-w-lg mt-12\">\n//         <p className=\"text-lg sm:text-xl text-white font-mono font-bold\">\n//           I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n//         </p>\n//         {/* Button */}\n//         <button className=\"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-balck hover:text-white transition\">\n//           → say hi\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Hero;\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Adjust the path based on where the image is located\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faChevronDown } from '@fortawesome/free-solid-svg-icons'; // Downward arrow icon\n// const Hero = () => {\n//   const imageWidth = 700;\n//   const [position, setPosition] = useState(-imageWidth); // Start off-screen to the left\n//   useEffect(() => {\n//     let animationFrameId;\n//     // Function to animate the image across the screen\n//     const animate = () => {\n//       setPosition((prev) =>\n//         prev >= window.innerWidth ? -imageWidth : prev + 2 // Reset to the left after leaving the screen\n//       );\n//       animationFrameId = requestAnimationFrame(animate);\n//     };\n//     // Start animation\n//     animate();\n//     // Cleanup on component unmount\n//     return () => cancelAnimationFrame(animationFrameId);\n//   }, []);\n//   // Bobbing effect based on position\n//   const bobPosition = Math.sin(position * 0.05) * 20; // Vertical bobbing\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] overflow-hidden relative\">\n//       {/* Title */}\n//       <h1 className=\"text-6xl font-bold text-[#090704] mt-12 mb-16 tracking-wide\">\n//         DAPHNE WU\n//       </h1>\n//       {/* Image moving across the screen */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sail Logo\"\n//         style={{\n//           transform: translateX(${position}px) translateY(${bobPosition}px), // Move horizontally and vertically\n//           position: \"absolute\", // Ensure it's positioned absolutely within the screen\n//         }}\n//         className=\"w-[700px] h-auto\"\n//       />\n//       {/* Down arrow */}\n//       <div className=\"down-arrow mt-64 style={{ position: 'absolute', bottom: '5px' }\">\n//         <FontAwesomeIcon icon={faChevronDown} size=\"3x\" color=\"#090704\" />\n//       </div>\n//     </div>\n//   );\n// };\n// export default Hero;\n//moving animation hero\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Your sailboat image\n// import ArrowImage from \"./assets/images/arrow.png\"; // Arrow image for desktop\n// import DragImage from \"./assets/images/drag.png\"; // Drag icon for mobile\n// const Hero = () => {\n//   const [position, setPosition] = useState({ x: 0, y: 300 });\n//   const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });\n//   const [isMobile, setIsMobile] = useState(false); // Track if the device is mobile\n//   const [isMoving, setIsMoving] = useState(false); // Track if the image is moving\n//   // Check if the device is mobile\n//   useEffect(() => {\n//     const checkMobile = () => {\n//       setIsMobile(window.innerWidth <= 768); // You can adjust the breakpoint based on your needs\n//     };\n//     // Check on load\n//     checkMobile();\n//     // Add resize listener to detect device switch\n//     window.addEventListener(\"resize\", checkMobile);\n//     return () => window.removeEventListener(\"resize\", checkMobile); // Cleanup on unmount\n//   }, []);\n//   // Handle keydown events for arrow keys (Desktop)\n//   const handleKeyDown = (event) => {\n//     const step = 10; // Distance moved per key press\n//     let newPosition = { ...position };\n//     switch (event.key) {\n//       case \"ArrowUp\":\n//         newPosition.y -= step;\n//         break;\n//       case \"ArrowDown\":\n//         newPosition.y += step;\n//         break;\n//       case \"ArrowLeft\":\n//         newPosition.x -= step;\n//         break;\n//       case \"ArrowRight\":\n//         newPosition.x += step;\n//         break;\n//       default:\n//         break;\n//     }\n//     setPosition(newPosition);\n//     setIsMoving(true); // Mark as moving when key is pressed\n//   };\n//   // Handle touch events for mobile (swiping)\n//   const handleTouchStart = (e) => {\n//     const touchStartX = e.touches[0].clientX;\n//     const touchStartY = e.touches[0].clientY;\n//     setTouchStart({ x: touchStartX, y: touchStartY });\n//   };\n//   const handleTouchMove = (e) => {\n//     if (!touchStart.x || !touchStart.y) return; // Ignore if no touch start position\n//     const touchEndX = e.touches[0].clientX;\n//     const touchEndY = e.touches[0].clientY;\n//     const deltaX = touchEndX - touchStart.x;\n//     const deltaY = touchEndY - touchStart.y;\n//     let newPosition = { ...position };\n//     // Move the boat based on the touch swipe distance\n//     newPosition.x += deltaX / 10; // Divide by a factor to control the speed of movement\n//     newPosition.y += deltaY / 10;\n//     setPosition(newPosition);\n//     setTouchStart({ x: touchEndX, y: touchEndY }); // Update touch start for next movement\n//     setIsMoving(true); // Mark as moving when touch is moved\n//   };\n//   const handleTouchEnd = () => {\n//     setTouchStart({ x: 0, y: 0 }); // Reset touch position when touch ends\n//   };\n//   // Attach and clean up keydown event listener\n//   useEffect(() => {\n//     window.addEventListener(\"keydown\", handleKeyDown);\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [position]); // Only re-run when position changes\n//   // Attach and clean up touch event listeners for mobile\n//   useEffect(() => {\n//     window.addEventListener(\"touchstart\", handleTouchStart);\n//     window.addEventListener(\"touchmove\", handleTouchMove);\n//     window.addEventListener(\"touchend\", handleTouchEnd);\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"touchstart\", handleTouchStart);\n//       window.removeEventListener(\"touchmove\", handleTouchMove);\n//       window.removeEventListener(\"touchend\", handleTouchEnd);\n//     };\n//   }, [position, touchStart]);\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] relative\">\n//       {/* Title */}\n//       <h1 className=\"text-7xl font-bold text-[#090704] mt-12 mb-16 tracking-wide z-20\">\n//         DAPHNE WU\n//       </h1>\n//       {/* Instruction Message for Mobile */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\", // Position it near the center of the screen\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on mobile and if not moving\n//         }}\n//       >\n//         Drag the sailboat to move it\n//       </p>\n//       {/* Instruction Message for Desktop */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, 40%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (!isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on desktop and if not moving\n//         }}\n//       >\n//         Use the arrow keys to move the sailboat\n//       </p>\n//       {/* Sailboat Image */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sailboat\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x}px,\n//           top: ${position.y}px,\n//           width: \"200px\",\n//           height: \"auto\",\n//           zIndex: 10,\n//         }}\n//       />\n//       {/* Arrow or Drag Image */}\n//       <img\n//         src={isMobile ? DragImage : ArrowImage} // Show drag icon for mobile, arrow for desktop\n//         alt=\"Move icon\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x + 220}px, // Position next to the sailboat\n//           top: ${position.y + 50}px, // Position vertically aligned with the sailboat\n//           width: \"50px\", // Size of the move icon\n//           height: \"auto\",\n//           zIndex: 20,\n//           visibility: isMoving ? \"hidden\" : \"visible\", // Hide when the image starts moving\n//         }}\n//       />\n//       {/* Optional: Down Arrow */}\n//       <div\n//         className=\"down-arrow\"\n//         style={{\n//           position: \"absolute\",\n//           bottom: \"10px\",\n//           left: \"50%\",\n//           transform: \"translateX(-50%)\",\n//           color: \"#090704\", // Customize the arrow color\n//           fontSize: \"2rem\", // Adjust the size of the arrow\n//         }}\n//       >\n//         ↓\n//       </div>\n//     </div>\n//   );\n// };\n// export default Hero;","map":{"version":3,"names":["React","useState","useEffect","Loading","jsx","_jsx","jsxs","_jsxs","Hero","_ref","setShowNavbar","fullText","displayedText","setDisplayedText","loading","setLoading","startTyping","setStartTyping","timer","setTimeout","clearTimeout","interval","setInterval","length","prev","clearInterval","className","children","onClick","window","location","href"],"sources":["/Users/daphnewu/Desktop/Projects/portfolio/Portfolio-website/src/components/Hero.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './styles/Hero.css';\nimport Loading from './Loading';\n\nconst Hero = ({ setShowNavbar }) => {\n  const fullText = \"hey there! i’m daphne.\";\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [startTyping, setStartTyping] = useState(false);\n\n  useEffect(() => {\n    // Simulate loading process\n    const timer = setTimeout(() => {\n      setLoading(false); // End loading\n      setStartTyping(true); // Start typing animation\n      setShowNavbar(true); // Show Navbar as soon as typing begins\n    }, 1500); // Slightly earlier than full loading time\n\n    return () => clearTimeout(timer);\n  }, [setShowNavbar]);\n\n  useEffect(() => {\n    if (startTyping) {\n      const interval = setInterval(() => {\n        if (displayedText.length < fullText.length) {\n          setDisplayedText((prev) => prev + fullText[displayedText.length]);\n        } else {\n          clearInterval(interval);\n        }\n      }, 50); // Typing speed\n\n      return () => clearInterval(interval);\n    }\n  }, [startTyping, displayedText]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"hero-section bg-[#141414] text-white\">\n      <div className=\"hero-container mx-auto max-w-4xl px-6\">\n        <h1 className=\"text-4xl sm:text-6xl font-bold font-sono text-center sm:text-left\">\n          {displayedText}\n          <span className=\"typing-cursor\"> </span>\n        </h1>\n        <p className=\"text-lg sm:text-xl font-mono text-center sm:text-left mt-4\">\n          I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n        </p>\n        <div className=\"text-center sm:text-left\">\n        <button\n          onClick={() => window.location.href = \"/contact\"} // Link to the contact page\n          className=\"mt-12 px-8 py-4 border border-white text-white text-lg rounded-full hover:bg-[#3c3c3c] hover:border-transparent hover:text-white transition-colors duration-300\"\n        >\n          → say hi\n        </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Hero;\n\n\n// import React, { useState, useEffect } from \"react\";\n// import './styles/Hero.css'; // Import the CSS for the cursor and animation\n// import Loading from './Loading';\n\n// const Hero = () => {\n//   const fullText = [\"hey there!\", \"i’m daphne.\"];\n//   const [firstLineText, setFirstLineText] = useState(\"\"); // Track the text for the first line\n//   const [secondLineText, setSecondLineText] = useState(\"\"); // Track the text for the second line\n//   const [typingIndex, setTypingIndex] = useState(0); // Track which line is being typed\n//   const [cursorVisible, setCursorVisible] = useState(true); // Toggle cursor visibility\n//   const [loading, setLoading] = useState(true); // Loading state\n//   const [startTyping, setStartTyping] = useState(false); // State to trigger typewriter effect\n\n//   // Simulate a 2-second loading process\n//   useEffect(() => {\n//     const timer = setTimeout(() => {\n//       setLoading(false); // End loading\n//       setStartTyping(true); // Start typing animation after loading\n//     }, 2000); // 2-second delay\n\n//     return () => clearTimeout(timer); // Clean up timer\n//   }, []);\n\n//   // Typing effect for the first line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 0) {\n//       const interval = setInterval(() => {\n//         if (firstLineText.length < fullText[0].length) {\n//           setFirstLineText((prevText) => prevText + fullText[0][firstLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//           setTypingIndex(1); // Start typing the second line after the first finishes\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [firstLineText, typingIndex, startTyping]);\n\n//   // Typing effect for the second line\n//   useEffect(() => {\n//     if (startTyping && typingIndex === 1) {\n//       const interval = setInterval(() => {\n//         if (secondLineText.length < fullText[1].length) {\n//           setSecondLineText((prevText) => prevText + fullText[1][secondLineText.length]);\n//         } else {\n//           clearInterval(interval);\n//         }\n//       }, 50); // typing speed\n\n//       return () => clearInterval(interval); // Clean up interval\n//     }\n//   }, [secondLineText, typingIndex, startTyping]);\n\n//   // Show loading screen while loading is true\n//   if (loading) {\n//     return <Loading />;\n//   }\n\n//   return (\n//     <div className=\"hero-section bg-black\" style={{ color: \"#FFFFF0\" }}>\n//       {/* Stacked Text with Typing Effect */}\n//       <div className=\"absolute left-64 top-1/4 transform -translate-y-1/2 space-y-4 text-left\">\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {firstLineText} {/* First line */}\n//           {typingIndex === 0 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on first line typing */}\n//         </h1>\n//         <h1 className=\"text-6xl font-bold leading-none font-sono\">\n//           {secondLineText} {/* Second line */}\n//           {typingIndex === 1 && <span className=\"typing-cursor\"></span>} {/* Cursor only visible on second line typing */}\n//         </h1>\n//       </div>\n\n//       {/* Intro Text */}\n//       <div className=\"absolute left-64 text-left max-w-lg mt-12\">\n//         <p className=\"text-lg sm:text-xl text-white font-mono font-bold\">\n//           I aspire to craft experiences that inspire and resonate at the crossroads of art, design, technology, and AI.\n//         </p>\n//         {/* Button */}\n//         <button className=\"mt-12 px-6 py-2 border border-white text-white rounded-full hover:bg-balck hover:text-white transition\">\n//           → say hi\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Adjust the path based on where the image is located\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faChevronDown } from '@fortawesome/free-solid-svg-icons'; // Downward arrow icon\n\n// const Hero = () => {\n//   const imageWidth = 700;\n//   const [position, setPosition] = useState(-imageWidth); // Start off-screen to the left\n\n//   useEffect(() => {\n//     let animationFrameId;\n\n//     // Function to animate the image across the screen\n//     const animate = () => {\n//       setPosition((prev) =>\n//         prev >= window.innerWidth ? -imageWidth : prev + 2 // Reset to the left after leaving the screen\n//       );\n//       animationFrameId = requestAnimationFrame(animate);\n//     };\n\n//     // Start animation\n//     animate();\n\n//     // Cleanup on component unmount\n//     return () => cancelAnimationFrame(animationFrameId);\n//   }, []);\n\n//   // Bobbing effect based on position\n//   const bobPosition = Math.sin(position * 0.05) * 20; // Vertical bobbing\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] overflow-hidden relative\">\n//       {/* Title */}\n//       <h1 className=\"text-6xl font-bold text-[#090704] mt-12 mb-16 tracking-wide\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Image moving across the screen */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sail Logo\"\n//         style={{\n//           transform: translateX(${position}px) translateY(${bobPosition}px), // Move horizontally and vertically\n//           position: \"absolute\", // Ensure it's positioned absolutely within the screen\n//         }}\n//         className=\"w-[700px] h-auto\"\n//       />\n\n//       {/* Down arrow */}\n//       <div className=\"down-arrow mt-64 style={{ position: 'absolute', bottom: '5px' }\">\n//         <FontAwesomeIcon icon={faChevronDown} size=\"3x\" color=\"#090704\" />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero;\n\n\n//moving animation hero\n// import React, { useEffect, useState } from \"react\";\n// import MyImage from \"./assets/images/saillogo.png\"; // Your sailboat image\n// import ArrowImage from \"./assets/images/arrow.png\"; // Arrow image for desktop\n// import DragImage from \"./assets/images/drag.png\"; // Drag icon for mobile\n\n// const Hero = () => {\n//   const [position, setPosition] = useState({ x: 0, y: 300 });\n//   const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });\n//   const [isMobile, setIsMobile] = useState(false); // Track if the device is mobile\n//   const [isMoving, setIsMoving] = useState(false); // Track if the image is moving\n\n//   // Check if the device is mobile\n//   useEffect(() => {\n//     const checkMobile = () => {\n//       setIsMobile(window.innerWidth <= 768); // You can adjust the breakpoint based on your needs\n//     };\n\n//     // Check on load\n//     checkMobile();\n\n//     // Add resize listener to detect device switch\n//     window.addEventListener(\"resize\", checkMobile);\n\n//     return () => window.removeEventListener(\"resize\", checkMobile); // Cleanup on unmount\n//   }, []);\n\n//   // Handle keydown events for arrow keys (Desktop)\n//   const handleKeyDown = (event) => {\n//     const step = 10; // Distance moved per key press\n//     let newPosition = { ...position };\n\n//     switch (event.key) {\n//       case \"ArrowUp\":\n//         newPosition.y -= step;\n//         break;\n//       case \"ArrowDown\":\n//         newPosition.y += step;\n//         break;\n//       case \"ArrowLeft\":\n//         newPosition.x -= step;\n//         break;\n//       case \"ArrowRight\":\n//         newPosition.x += step;\n//         break;\n//       default:\n//         break;\n//     }\n\n//     setPosition(newPosition);\n//     setIsMoving(true); // Mark as moving when key is pressed\n//   };\n\n//   // Handle touch events for mobile (swiping)\n//   const handleTouchStart = (e) => {\n//     const touchStartX = e.touches[0].clientX;\n//     const touchStartY = e.touches[0].clientY;\n//     setTouchStart({ x: touchStartX, y: touchStartY });\n//   };\n\n//   const handleTouchMove = (e) => {\n//     if (!touchStart.x || !touchStart.y) return; // Ignore if no touch start position\n\n//     const touchEndX = e.touches[0].clientX;\n//     const touchEndY = e.touches[0].clientY;\n\n//     const deltaX = touchEndX - touchStart.x;\n//     const deltaY = touchEndY - touchStart.y;\n\n//     let newPosition = { ...position };\n\n//     // Move the boat based on the touch swipe distance\n//     newPosition.x += deltaX / 10; // Divide by a factor to control the speed of movement\n//     newPosition.y += deltaY / 10;\n\n//     setPosition(newPosition);\n//     setTouchStart({ x: touchEndX, y: touchEndY }); // Update touch start for next movement\n//     setIsMoving(true); // Mark as moving when touch is moved\n//   };\n\n//   const handleTouchEnd = () => {\n//     setTouchStart({ x: 0, y: 0 }); // Reset touch position when touch ends\n//   };\n\n//   // Attach and clean up keydown event listener\n//   useEffect(() => {\n//     window.addEventListener(\"keydown\", handleKeyDown);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"keydown\", handleKeyDown);\n//     };\n//   }, [position]); // Only re-run when position changes\n\n//   // Attach and clean up touch event listeners for mobile\n//   useEffect(() => {\n//     window.addEventListener(\"touchstart\", handleTouchStart);\n//     window.addEventListener(\"touchmove\", handleTouchMove);\n//     window.addEventListener(\"touchend\", handleTouchEnd);\n\n//     // Cleanup when component unmounts\n//     return () => {\n//       window.removeEventListener(\"touchstart\", handleTouchStart);\n//       window.removeEventListener(\"touchmove\", handleTouchMove);\n//       window.removeEventListener(\"touchend\", handleTouchEnd);\n//     };\n//   }, [position, touchStart]);\n\n//   return (\n//     <div className=\"hero text-[#090704] p-0 m-0 h-screen w-full text-center flex flex-col justify-center items-center bg-[#f7f7f7] relative\">\n//       {/* Title */}\n//       <h1 className=\"text-7xl font-bold text-[#090704] mt-12 mb-16 tracking-wide z-20\">\n//         DAPHNE WU\n//       </h1>\n\n//       {/* Instruction Message for Mobile */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\", // Position it near the center of the screen\n//           left: \"50%\",\n//           transform: \"translate(-50%, -50%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on mobile and if not moving\n//         }}\n//       >\n//         Drag the sailboat to move it\n//       </p>\n\n//       {/* Instruction Message for Desktop */}\n//       <p\n//         className=\"instruction-message text-[#090704] font-medium text-lg z-20\"\n//         style={{\n//           position: \"absolute\",\n//           top: \"50%\",\n//           left: \"50%\",\n//           transform: \"translate(-50%, 40%)\",\n//           padding: \"10px\",\n//           backgroundColor: \"#f7f7f7\",\n//           borderRadius: \"5px\",\n//           visibility: (!isMobile && !isMoving) ? \"visible\" : \"hidden\", // Show only on desktop and if not moving\n//         }}\n//       >\n//         Use the arrow keys to move the sailboat\n//       </p>\n\n//       {/* Sailboat Image */}\n//       <img\n//         src={MyImage}\n//         alt=\"Sailboat\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x}px,\n//           top: ${position.y}px,\n//           width: \"200px\",\n//           height: \"auto\",\n//           zIndex: 10,\n//         }}\n//       />\n\n//       {/* Arrow or Drag Image */}\n//       <img\n//         src={isMobile ? DragImage : ArrowImage} // Show drag icon for mobile, arrow for desktop\n//         alt=\"Move icon\"\n//         style={{\n//           position: \"absolute\",\n//           left: ${position.x + 220}px, // Position next to the sailboat\n//           top: ${position.y + 50}px, // Position vertically aligned with the sailboat\n//           width: \"50px\", // Size of the move icon\n//           height: \"auto\",\n//           zIndex: 20,\n//           visibility: isMoving ? \"hidden\" : \"visible\", // Hide when the image starts moving\n//         }}\n//       />\n\n//       {/* Optional: Down Arrow */}\n//       <div\n//         className=\"down-arrow\"\n//         style={{\n//           position: \"absolute\",\n//           bottom: \"10px\",\n//           left: \"50%\",\n//           transform: \"translateX(-50%)\",\n//           color: \"#090704\", // Customize the arrow color\n//           fontSize: \"2rem\", // Adjust the size of the arrow\n//         }}\n//       >\n//         ↓\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Hero; \n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,mBAAmB,CAC1B,MAAO,CAAAC,OAAO,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,IAAI,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,aAAc,CAAC,CAAAD,IAAA,CAC7B,KAAM,CAAAE,QAAQ,CAAG,wBAAwB,CACzC,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGZ,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACe,WAAW,CAAEC,cAAc,CAAC,CAAGhB,QAAQ,CAAC,KAAK,CAAC,CAErDC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAgB,KAAK,CAAGC,UAAU,CAAC,IAAM,CAC7BJ,UAAU,CAAC,KAAK,CAAC,CAAE;AACnBE,cAAc,CAAC,IAAI,CAAC,CAAE;AACtBP,aAAa,CAAC,IAAI,CAAC,CAAE;AACvB,CAAC,CAAE,IAAI,CAAC,CAAE;AAEV,MAAO,IAAMU,YAAY,CAACF,KAAK,CAAC,CAClC,CAAC,CAAE,CAACR,aAAa,CAAC,CAAC,CAEnBR,SAAS,CAAC,IAAM,CACd,GAAIc,WAAW,CAAE,CACf,KAAM,CAAAK,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC,GAAIV,aAAa,CAACW,MAAM,CAAGZ,QAAQ,CAACY,MAAM,CAAE,CAC1CV,gBAAgB,CAAEW,IAAI,EAAKA,IAAI,CAAGb,QAAQ,CAACC,aAAa,CAACW,MAAM,CAAC,CAAC,CACnE,CAAC,IAAM,CACLE,aAAa,CAACJ,QAAQ,CAAC,CACzB,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,MAAO,IAAMI,aAAa,CAACJ,QAAQ,CAAC,CACtC,CACF,CAAC,CAAE,CAACL,WAAW,CAAEJ,aAAa,CAAC,CAAC,CAEhC,GAAIE,OAAO,CAAE,CACX,mBAAOT,IAAA,CAACF,OAAO,GAAE,CAAC,CACpB,CAEA,mBACEE,IAAA,QAAKqB,SAAS,CAAC,sCAAsC,CAAAC,QAAA,cACnDpB,KAAA,QAAKmB,SAAS,CAAC,uCAAuC,CAAAC,QAAA,eACpDpB,KAAA,OAAImB,SAAS,CAAC,mEAAmE,CAAAC,QAAA,EAC9Ef,aAAa,cACdP,IAAA,SAAMqB,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,GAAC,CAAM,CAAC,EACtC,CAAC,cACLtB,IAAA,MAAGqB,SAAS,CAAC,4DAA4D,CAAAC,QAAA,CAAC,+GAE1E,CAAG,CAAC,cACJtB,IAAA,QAAKqB,SAAS,CAAC,0BAA0B,CAAAC,QAAA,cACzCtB,IAAA,WACEuB,OAAO,CAAEA,CAAA,GAAMC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,UAAY;AAAA,CAClDL,SAAS,CAAC,iKAAiK,CAAAC,QAAA,CAC5K,eAED,CAAQ,CAAC,CACJ,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,IAAI,CAGnignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}